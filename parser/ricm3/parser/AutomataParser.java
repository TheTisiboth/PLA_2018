/* Generated By:JavaCC: Do not edit this line. AutomataParser.java */
package ricm3.parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import ricm3.parser.Ast.*;

public class AutomataParser implements AutomataParserConstants {

        public static Ast from_file(String path_file) throws Exception {
                Ast ast = new AutomataParser(new BufferedReader(new FileReader(path_file))).Run();
                return ast;
   }

   public static Ast from_string(String input) throws Exception {
        Ast ast = new AutomataParser(new java.io.StringReader(input)).Run() ;
                return ast ;
   }

   public static void main(String[] args) throws Exception {
        Ast ast ;
        ast = from_string(args[0]) ;
        // ast = from_file(args[0]) ;
        System.out.println("// THE AST of the PARSED AUTOMATA in DOT FORMAT \u005cn" + ast.as_dot_tree()) ;
    }

/* == The grammar for writing automata

Run
  | Some_Automata <EOF>

Some_Automata
  | Automaton Some_Automata
  | epsilon

Automaton
  | Identifier "(" Identifier ")" "{" At_least_one_Behaviour "}"

At_least_one_Behaviour
  | Behaviour  Some_Behaviour

Some_Behaviour
  | At_least_one_Behaviour
  | epsilon

Behaviour
  | "*"  State Opt_points Some_Transitions

Opt_points
  | ":" 
  | epsilon

State
  | "(" State_Identifier ")"

State_Identifier
  | Identifier
  | "_"
  | epsilon 

Some_Transitions
  | Transition  Some_Transitions 
  | epsilon
  
Transition
  | Opt_Bar  Condition "?" Action ":"  State

Opt_Bar
  | "|"
  | epsilon

Condition
  | "(" Condition ")" 
  | "!" Condition  
  | Atomic_Condition  Op_Condition

Op_Condition
  | "&" Condition
  | "/" Condition
  | epsilon  

Atomic_Condition
  | Available_Condition Opt_Parameters
  
Available_Condition
  | Identifier 

Action
  | Atomic_Action Op_Action

Op_Action
  | "/" Action
  | epsilon 
   
Atomic_Action
  | Available_Action  Opt_Parameters

Available_Action
  |  Identifier 

    
Opt_Parameters
  | "(" Some_Parameters ")"
  | epsilon

Some_Parameters
  | Parameter  More_Parameters
  | epsilon

More_Parameters
  | ","  Parameter  More_Parameters 
  | epsilon
      
Parameters
  | Direction
  | "Opp" "(" Direction ")"
  | Entity
  |  "_"
  
Direction
  | "N" | "S" | "O" | "E"
  | "F" = Front
  | "B" = Back
  | "L" = Left
  | "R" = Right
  | "d" = variable of type direction

Entity
  | "V" = Void
  | "T" = Team
  | "E" = Ennemi
  | "P" = Pickable
  | "J" = Jumpable
  | "D" = Danger
  | "O" = Other 
  | "e" = variable of type entity

*/

// THE PARSER

/**
 ** See Ast.java for the definitions of types returned by Parsers
 **/

/* Identifier */
  static final public String P_Identifier() throws ParseException {
  Token token;
    token = jj_consume_token(ID);
               {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/* Direction
 * | "N" | "S" | "O" | "E" | "F" | "B" | "L" | "R"
 * | "d"
 */
  static final public Direction P_Direction() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIRECTION:
      token = jj_consume_token(DIRECTION);
                      {if (true) return new Direction(new Constant(token.image));}
      break;
    case DIRVAR:
      token = jj_consume_token(DIRVAR);
                      {if (true) return new Direction(new Variable(token.image));}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Entity
 * | "V" | "T" | "E" | "P" | "J" | "D" | "O" 
 * | "e"
 */
  static final public Entity P_Entity() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTITY:
      token = jj_consume_token(ENTITY);
                    {if (true) return new Entity(new Constant(token.image));}
      break;
    case ENTVAR:
      token = jj_consume_token(ENTVAR);
                    {if (true) return new Entity(new Variable(token.image));}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Run
 * | Some_Automata <EOF>
 */
  static final public Ast Run() throws ParseException {
  List<Automaton> automata ;
    automata = P_Some_Automata(new LinkedList<Automaton>());
    jj_consume_token(0);
          {if (true) return new AI_Definitions(automata) ;}
    throw new Error("Missing return statement in function");
  }

/* Some_Automata
 * | Automaton Some_Automata
 * | epsilon
 */
  static final public List<Automaton> P_Some_Automata(List<Automaton> input_list) throws ParseException {
  Automaton aut ;
  List<Automaton> list ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      aut = P_Automaton();
      list = P_Some_Automata(input_list);
          list.add(0,aut) ; {if (true) return list ;}
      break;
    default:
      jj_la1[2] = jj_gen;
          {if (true) return input_list ;}
    }
    throw new Error("Missing return statement in function");
  }

/* Automaton
 * | Identifier "(" Identifier ")" "{" At_least_one_Behaviour "}"
 */
  static final public Automaton P_Automaton() throws ParseException {
  String name ;
  String entry_state ;
  List<Behaviour> behaviours ;
    name = P_Identifier();
    jj_consume_token(15);
    entry_state = P_Identifier();
    jj_consume_token(16);
    jj_consume_token(17);
    behaviours = P_At_least_one_Behaviour(new LinkedList<Behaviour>());
    jj_consume_token(18);
    {if (true) return new Automaton(name, new State(entry_state), behaviours) ;}
    throw new Error("Missing return statement in function");
  }

/* At_least_one_Behaviour
 * | Behaviour  Some_Behaviour
 */
  static final public List<Behaviour> P_At_least_one_Behaviour(List<Behaviour> input_list) throws ParseException {
  Behaviour behaviour ;
  List<Behaviour> list ;
    behaviour = P_Behaviour();
    list = P_Some_Behaviour(input_list);
          list.add(0,behaviour) ; {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

/* Some_Behaviour
 * | At_least_one_Behaviour
 * | epsilon
 */
  static final public List<Behaviour> P_Some_Behaviour(List<Behaviour> input_list) throws ParseException {
  List<Behaviour> list ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      list = P_At_least_one_Behaviour(input_list);
          {if (true) return list ;}
      break;
    default:
      jj_la1[3] = jj_gen;
          {if (true) return input_list ;}
    }
    throw new Error("Missing return statement in function");
  }

/* Behaviour
 * | "*"  State Opt_points Some_Transitions
 */
  static final public Behaviour P_Behaviour() throws ParseException {
  State state ;
  List<Transition> list = new LinkedList<Transition>() ;
    jj_consume_token(19);
    state = P_State();
    P_Opt_Points();
    list = P_Some_Transitions(list);
          {if (true) return new Behaviour(state,list) ;}
    throw new Error("Missing return statement in function");
  }

/* Opt_points
 * | ":" 
 * | epsilon
 */
  static final public Void P_Opt_Points() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
                {if (true) return null;}
      break;
    default:
      jj_la1[4] = jj_gen;
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

/* State
 * | "(" State_Identifier ")"
 */
  static final public State P_State() throws ParseException {
  State state ;
    jj_consume_token(15);
    state = P_State_Identifier();
    jj_consume_token(16);
          {if (true) return state;}
    throw new Error("Missing return statement in function");
  }

/* State_Identifier
 * | Identifier
 * | "_"
 * | epsilon
 */
  static final public State P_State_Identifier() throws ParseException {
  String name ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      name = P_Identifier();
          {if (true) return new State(name);}
      break;
    case 21:
      jj_consume_token(21);
          {if (true) return new State("_");}
      break;
    default:
      jj_la1[5] = jj_gen;
          {if (true) return new State("");}
    }
    throw new Error("Missing return statement in function");
  }

/* Some_Transitions
 * | Transition  Some_Transitions 
 * | epsilon
 */
  static final public List<Transition> P_Some_Transitions(List<Transition> input_list) throws ParseException {
  Transition transition ;
  List<Transition> list ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNARY:
    case ID:
    case 15:
    case 23:
      transition = P_Transition();
      list = P_Some_Transitions(input_list);
       list.add(0,transition) ; {if (true) return list ;}
      break;
    default:
      jj_la1[6] = jj_gen;
          {if (true) return input_list ;}
    }
    throw new Error("Missing return statement in function");
  }

/* Transition
 * | Opt_Bar  Condition "?" Action ":"  State
 */
  static final public Transition P_Transition() throws ParseException {
        Condition condition ;
        Action action ;
        State state ;
    P_Opt_Bar();
    condition = P_Condition();
    jj_consume_token(22);
    action = P_Action();
    jj_consume_token(20);
    state = P_State();
          {if (true) return new Transition(condition,action,state) ;}
    throw new Error("Missing return statement in function");
  }

/* Opt_Bar
 * | "|"
 * | epsilon
 */
  static final public Void P_Opt_Bar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      jj_consume_token(23);
                {if (true) return null;}
      break;
    default:
      jj_la1[7] = jj_gen;
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

/* Condition
   | Expression
*/
  static final public Condition P_Condition() throws ParseException {
  Expression expression ;
    expression = P_Expression();
          {if (true) return new Condition(expression) ;}
    throw new Error("Missing return statement in function");
  }

/* Action
   | Expression
*/
  static final public Action P_Action() throws ParseException {
  Expression expression ;
    expression = P_Expression();
          {if (true) return new Action(expression) ;}
    throw new Error("Missing return statement in function");
  }

/* Expression
   | "(" Expression ")" 
   | <UNARYOP> Expression 
   | FunCall  Op_Expression
*/
  static final public Expression P_Expression() throws ParseException {
  Expression expression ;
  Token token ;
  FunCall funcall ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      expression = P_Expression();
      jj_consume_token(16);
          {if (true) return expression ;}
      break;
    case UNARY:
      token = jj_consume_token(UNARY);
      expression = P_Expression();
          {if (true) return new UnaryOp(token.image,expression) ;}
      break;
    case ID:
      funcall = P_FunCall();
      expression = P_Op_Expression(funcall);
          {if (true) return expression ;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Op_Expression
   | <BINOP> Expression
   | epsilon
*/
  static final public Expression P_Op_Expression(Expression e1) throws ParseException {
  Token token ;
  Expression e2 ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BINOP:
      token = jj_consume_token(BINOP);
      e2 = P_Expression();
      {if (true) return new BinaryOp(e1,token.image,e2) ;}
      break;
    default:
      jj_la1[9] = jj_gen;
          {if (true) return e1 ;}
    }
    throw new Error("Missing return statement in function");
  }

/* FunCall
 * | Identifier Opt_Parameters
 */
  static final public FunCall P_FunCall() throws ParseException {
  String fun_name ;
  List<Expression> parameters ;
    fun_name = P_Identifier();
    parameters = P_Opt_Parameters(new LinkedList<Expression>());
          {if (true) return new FunCall(fun_name, parameters) ;}
    throw new Error("Missing return statement in function");
  }

/* Opt_Parameters
 * | "(" Some_Parameters ")"
 * | epsilon
 */
  static final public List<Expression> P_Opt_Parameters(List<Expression> input_list) throws ParseException {
  List<Expression> list ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      list = P_Some_Parameters(input_list);
      jj_consume_token(16);
          {if (true) return list ;}
      break;
    default:
      jj_la1[10] = jj_gen;
          {if (true) return input_list ;}
    }
    throw new Error("Missing return statement in function");
  }

/* Some_Parameters
 * | Parameter  More_Parameters
 * | epsilon
 */
  static final public List<Expression> P_Some_Parameters(List<Expression> input_list) throws ParseException {
  Expression parameter ;
  List<Expression> list ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNARY:
    case DIRVAR:
    case DIRECTION:
    case ENTVAR:
    case ENTITY:
    case 21:
      parameter = P_Parameter();
      list = P_More_Parameters(input_list);
          list.add(0,parameter) ; {if (true) return list ;}
      break;
    default:
      jj_la1[11] = jj_gen;
          {if (true) return input_list ;}
    }
    throw new Error("Missing return statement in function");
  }

/* More_Parameters
 * | ","  Parameter  More_Parameters 
 * | epsilon
 */
  static final public List<Expression> P_More_Parameters(List<Expression> input_list) throws ParseException {
  Expression parameter ;
  List<Expression> list ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      parameter = P_Parameter();
      list = P_More_Parameters(input_list);
          list.add(0,parameter) ; {if (true) return list ;}
      break;
    default:
      jj_la1[12] = jj_gen;
          {if (true) return input_list ;}
    }
    throw new Error("Missing return statement in function");
  }

/* Parameters
 * | Direction
 * | "Opp" "(" Direction ")"
 * | Entity
 * |  "_"
 */
  static final public Expression P_Parameter() throws ParseException {
  Token token ;
  Expression expression ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIRVAR:
    case DIRECTION:
      expression = P_Direction();
          {if (true) return expression ;}
      break;
    case UNARY:
      token = jj_consume_token(UNARY);
      jj_consume_token(15);
      expression = P_Direction();
      jj_consume_token(16);
          {if (true) return new UnaryOp(token.image, expression) ;}
      break;
    case ENTVAR:
    case ENTITY:
      expression = P_Entity();
          {if (true) return expression ;}
      break;
    case 21:
      jj_consume_token(21);
          {if (true) return new Variable("_") ;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AutomataParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x600,0x1800,0x2000,0x80000,0x100000,0x202000,0x80a080,0x800000,0xa080,0x100,0x8000,0x201e80,0x1000000,0x201e80,};
   }

  /** Constructor with InputStream. */
  public AutomataParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AutomataParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AutomataParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AutomataParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AutomataParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AutomataParser(AutomataParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AutomataParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
