Exploseur(DEPL1){
* (DEPL1):
  | Cell(L, V) & GotPower() ? Move(L) : (DEPL2)
  | Cell(R, V) & GotPower() ? Move(R) : (DEPL2)
  | Cell(F, V) & GotPower() ? Move(F) : (DEPL2)
  | Cell(B, V) & GotPower() ? Move(B) : (DEPL2)
  | True ? Kamikaze : ()
* (DEPL2):
  | Cell(F, V) & GotPower() ? Move(F) : (DEPL3)
  | Cell(R, V) & GotPower() ? Move(R) : (DEPL3)
  | Cell(L, V) & GotPower() ? Move(L) : (DEPL3)
  | Cell(B, V) & GotPower() ? Move(B) : (DEPL3)
  | True ? Kamikaze : ()
* (DEPL3):
  | Cell(R, V) & GotPower() ? Move(R) : (DEPL1)
  | Cell(F, V) & GotPower() ? Move(F) : (DEPL1)
  | Cell(L, V) & GotPower() ? Move(L) : (DEPL1)
  | Cell(B, V) & GotPower() ? Move(B) : (DEPL1)
  | True ? Kamikaze : ()
}

Peintre(DEPL1){
* (DEPL1):
  | Cell(L, V) & GotPower() ? Move(L) : (PEINT1)
  | Cell(R, V) & GotPower() ? Move(R) : (PEINT1)
  | Cell(F, V) & GotPower() ? Move(F) : (PEINT1)
  | Cell(B, V) & GotPower() ? Move(B) : (PEINT1)
  | True ? Pop : ()
* (PEINT1): True ? Pop : (DEPL2)
* (DEPL2):
  | Cell(F, V) & GotPower() ? Move(F) : (PEINT2)
  | Cell(R, V) & GotPower() ? Move(R) : (PEINT2)
  | Cell(L, V) & GotPower() ? Move(L) : (PEINT2)
  | Cell(B, V) & GotPower() ? Move(B) : (PEINT2)
  | True ? Pop : ()
* (PEINT2): True ? Pop : (DEPL3)
* (DEPL3):
  | Cell(R, V) & GotPower() ? Move(R) : (PEINT3)
  | Cell(F, V) & GotPower() ? Move(F) : (PEINT3)
  | Cell(L, V) & GotPower() ? Move(L) : (PEINT3)
  | Cell(B, V) & GotPower() ? Move(B) : (PEINT3)
  | True ? Pop : ()
* (PEINT3): True ? Pop : (DEPL1)
}

Constructeur(DEPL1){
* (DEPL1):
  | Cell(L, V) & GotPower() ? Move(L) : (MUR1)
  | Cell(R, V) & GotPower() ? Move(R) : (MUR1)
  | Cell(F, V) & GotPower() ? Move(F) : (MUR1)
  | Cell(B, V) & GotPower() ? Move(B) : (MUR1)
  | True ? Wizz : ()
* (MUR1): True ? Wizz : (DEPL2)
* (DEPL2):
  | Cell(F, V) & GotPower() ? Move(F) : (MUR2)
  | Cell(R, V) & GotPower() ? Move(R) : (MUR2)
  | Cell(L, V) & GotPower() ? Move(L) : (MUR2)
  | Cell(B, V) & GotPower() ? Move(B) : (MUR2)
  | True ? Wizz : ()
* (MUR2): True ? Wizz : (DEPL3)
* (DEPL3):
  | Cell(R, V) & GotPower() ? Move(R) : (MUR3)
  | Cell(F, V) & GotPower() ? Move(F) : (MUR3)
  | Cell(L, V) & GotPower() ? Move(L) : (MUR3)
  | Cell(B, V) & GotPower() ? Move(B) : (MUR3)
  | True ? Wizz : ()
* (MUR3): True ? Wizz : (DEPL1)
}

Filou(DEPL1){
* (DEPL1):
  | Cell(L, V) & GotPower() ? Move(L) : (FILOUTERIE1)
  | Cell(R, V) & GotPower() ? Move(R) : (FILOUTERIE1)
  | Cell(F, V) & GotPower() ? Move(F) : (FILOUTERIE1)
  | Cell(B, V) & GotPower() ? Move(B) : (FILOUTERIE1)
  | True ? Pop / Pick : ()
* (FILOUTERIE1): True ? Pop / Pick : (DEPL2)
* (DEPL2):
  | Cell(F, V) & GotPower() ? Move(F) : (FILOUTERIE2)
  | Cell(R, V) & GotPower() ? Move(R) : (FILOUTERIE2)
  | Cell(L, V) & GotPower() ? Move(L) : (FILOUTERIE2)
  | Cell(B, V) & GotPower() ? Move(B) : (FILOUTERIE2)
  | True ? Pop / Pick: ()
* (FILOUTERIE2): True ? Pop / Pick: (DEPL3)
* (DEPL3):
  | Cell(R, V) & GotPower() ? Move(R) : (FILOUTERIE3)
  | Cell(F, V) & GotPower() ? Move(F) : (FILOUTERIE3)
  | Cell(L, V) & GotPower() ? Move(L) : (FILOUTERIE3)
  | Cell(B, V) & GotPower() ? Move(B) : (FILOUTERIE3)
  | True ? Pop / Pick: ()
* (FILOUTERIE3): True ? Pop / Pick: (DEPL1)
}

Philosopher(Think){
  * (Think)
}

Blocker(Init){
  * (Init): !True ? Power :(Init)
}

Mover(Init){
  * (Init): True ? Move :(Init)
}

Popper(Init){
  * (Init): True ? Pop :(Init)
}

Wizzer(Init){
  * (Init): True ? Wizz :(Init)
}

Turner(Turn_0){
  * (Turn_0): True ? Turn(R) :(Turn_1)
  * (Turn_1): True ? Turn(R) :(Turn_2)
  * (Turn_2): True ? Turn(R) :(Turn_3)
  * (Turn_3): True ? Turn(R) :(Turn_4)
  * (Turn_4): True ? Kamikaze :()
}

Master(Think){
 * (Think_0): True ? Power :(Think_1)
 * (Think_1): True ? Power :(Think_2)
 * (Think_2): True ? Power :(Think_3)
 * (Think_3): True ? Power :(Think_4)
 * (Think_4): True ? Power :(Happy_0)

 * (Happy_0): True ? Power :(Happy_1)
 * (Happy_1): True ? Power :(Happy_2)
 * (Happy_2): True ? Power :(Happy_3)
 * (Happy_3): True ? Power :(Happy_4)
 * (Happy_4): True ? Power :(Happy_5)

 * (Happy_5): True ? Kamikaze   :(X)
}


Explorer(Explore_R){

* (Explore_R):
  | Cell(F,V) ? Move    :(Explore_R)
  | Cell(R,V) ? Turn(R) :(Explore_R)
  | Cell(L,V) ? Turn(L) :(Explore_R)
  | True ? Turn(B) :(Explore_L)

* (Explore_L):
    | Cell(F,V) ? Move    :(Explore_L)
    | Cell(L,V) ? Turn(L) :(Explore_L)
    | Cell(R,V) ? Turn(R) :(Explore_L)
    | True ? Turn(B) :(Explore_R)
}


SuperHero(Explore){

* (Explore):
  | Cell(F,P) ? Pick    :(Happy)
  | Cell(F,V) ? Move(F) :(Run)
  | Cell(F,J) ? Jump    :(Explore)
  | True ? Turn(L)      :(Explore)

* (Run):
  | Cell(F,V) ? Move(F) :(Explore)
  | Cell(F,A) / Cell(B,A) / Cell(L,A) / Cell(R,A) ? Wizz :(Escape)
  | True ? Pop :(Explore)

* (Escape):
  | Cell(F,A) & Cell(B,V) ? Move(B) :(Escape)
  | Cell(B,A) & Cell(F,V) ? Move(F) :(Escape)
  | Cell(R,A) & Cell(L,V) ? Move(L) :(Escape)
  | Cell(L,A) & Cell(R,V) ? Move(R) :(Escape)
  | Cell(F,A) & !(Cell(B,V)) ? Hit  :(Fight)
  | True ? Power :(Explore)

* (Fight):
  | Cell(F,A) & Cell(L,A) & !(Cell(R,V) / Cell(B,V)) ? Hit     :(Angry)
  | Cell(F,A) & Cell(R,A) & !(Cell(L,V) / Cell(B,V)) ? Hit     :(Angry)
  | Cell(F,A) & Cell(B,A) & !(Cell(L,V) / Cell(R,V)) ? Hit     :(Angry)
  | Cell(L,A) & Cell(R,A) & !(Cell(F,V) / Cell(B,V)) ? Turn(R) :(Angry)
  | True ? Pop :(Escape)

* (Angry):
  | GotPower ? Hit      :(Angry_11)
  | !GotPower ? Protect :(Angry_11)

* (Angry_11): True ? Turn(B) :(Angry_12)

* (Angry_12):
  | GotPower ? Hit      :(Angry_13)
  | !GotPower ? Protect :(Angry_13)


* (Angry_13): True ? Turn(R) :(Angry_14)
* (Angry_14):
  | GotPower ? Hit      :(Angry_15)
  | !GotPower ? Protect :(Angry_15)


* (Angry_16): True ? Turn(B) :(Angry_17)
* (Angry_17):
  | GotPower ? Hit      :(Angry_18)
  | !GotPower ? Protect :(Angry_18)


* (Angry_18): True ? Turn(R) :(Rest)

* (Rest):
  | Cell(F,V) & Cell(B,V) & Cell(L,V) & Cell(R,V) ? Power : (Rest)
  | True ? Power :(Run)

* (Happy):
| Cell(F,P) ? Pick    :(Happy_2)
| Cell(B,P) ? Turn(B) :(Happy)
| Cell(L,P) ? Turn(L) :(Happy)
| Cell(R,P) ? Turn(R) :(Happy)
| True ? Turn(L)      :(Explore)

*(Happy): True ? Store :(Crazy)

* (Crazy)  : True ? Get     :(Crazy_1)
* (Crazy_1): True ? Get     :(Crazy_2)
* (Crazy_2): True ? Turn(B) :(Crazy_3)
* (Crazy_3): True ? Throw   :(Think)

* (Think):
  | Cell(F,J) ? Jump    :(Build)
  | Cell(B,J) ? Turn(B) :(Think)
  | Cell(L,J) ? Turn(L) :(Think)
  | Cell(R,J) ? Turn(R) :(Think)

* (Build):
  | GotStuff ? Get :(Build_1)
  | True ? Wizz    :(Explore)

* (Build_1): True ? Throw :(Build)
}

IA (DEPL){
*(DEPL) :
	|!GotPower() ? Pop(): (RECHERCHE_PEINTURE) 
	|Cell(F,G) ? Hit : (DEPL)
	|Cell(R,V) & !Cell(F,V) ? Move(R) : (DEPL)		
	|Cell(L,V) & !Cell(F,V) ? Move(L) : (DEPL) 
	|Cell(F,V) ? Move(F) : (DEPL) 	
	
	
*(RECHERCHE_SBIRE) :
	|Closest(J, L) & !(GotStuff()) ? Move(L) : (RECHERCHE_SBIRE)
	|Closest(J, R) & !(GotStuff()) ? Move(R) : (RECHERCHE_SBIRE)
	|Closest(J, F) & !(GotStuff()) ? Move(F) : (RECHERCHE_SBIRE)
	|Closest(J, B) & !(GotStuff()) ? Move(B) : (RECHERCHE_SBIRE)
	|GotStuff() ? Pop() : (LANCER_SBIRE) 

*(LANCER_SBIRE) : 
	|Cell(F,V) ? Throw(F) : (DEPL)
	|!(Cell(F,V)) ? Move(R) / Move(L) : (LANCER_SBIRE) 


*(RECHERCHE_PEINTURE) :
	|Closest(M, L) & !(GotPower()) ? Move(L) : (RECHERCHE_PEINTURE)
	|Closest(M, R) & !(GotPower()) ? Move(R) : (RECHERCHE_PEINTURE)
	|Closest(M, F) & !(GotPower()) ? Move(F) : (RECHERCHE_PEINTURE)
	|Closest(M, B) & !(GotPower()) ? Move(B) : (RECHERCHE_PEINTURE)
	|GotPower() ? Pop() : (DEPL) 
}